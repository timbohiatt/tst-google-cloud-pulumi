# Node / JS / TS
node_modules

# IDE
.vscode
.DS_Store

# ESLint
.eslintcache

# ================================
# ============ Pulumi ============
# ================================

*.swp
**/vendor/
**/node_modules/
**/bin
**/.vscode/**/*
**/.vs/
**/.ionide/
**/.idea/
**/.DS_Store
coverage.cov
*.coverprofile
**/obj/
coverage/
venv/
.envrc

**/.idea/
*.iml
.yarn
# VSCode creates this binary when running tests in the debugger
**/debug.test

# Check in vscode settings for this workspace. This is so we can save common settings like setting go build tags to use by default.
!**/.vscode/settings.json

# Go tests run "in tree" and this folder will linger if they fail (the integration test framework cleans
# it up when they pass.)
**/command-output/

# Likewise, we don't want to keep the typechecked version of our codegen tests.
pkg/codegen/testing/test/testdata/*/typecheck/**

# We don't need to keep testing python __pycache__ either either
pkg/codegen/testing/test/testdata/*-pp/*/*.csproj
pkg/codegen/testing/test/testdata/*-pp/*/go.mod
pkg/codegen/testing/test/testdata/*-pp/*/go.sum
pkg/codegen/testing/test/testdata/*-pp/*/Program.cs
pkg/codegen/testing/test/testdata/*-pp/*/package.json
pkg/codegen/testing/test/testdata/*-pp/*/go.sum
pkg/codegen/testing/test/testdata/*-pp/*/tsconfig.json

# By default, we don't check in yarn.lock files
**/yarn.lock

# By default, we don't check in Pipfile.lock files
**/Pipfile.lock

# Turning on MyPy in VSCode creates this workspace local folder
.mypy_cache

# for goreleaser
**/*.exe
goreleaser
pulumi-resource-pulumi-nodejs
pulumi-resource-pulumi-python
pulumi-analyzer-policy
pulumi-analyzer-policy-python
pulumi-language-python-exec
pulumi-resource-pulumi-nodejs.cmd
pulumi-resource-pulumi-python.cmd
pulumi-python3-shim.cmd
pulumi-python-shim.cmd
pulumi-analyzer-policy.cmd
pulumi-analyzer-policy-python.cmd
artifacts/
goreleaser-downloads/
goreleaser-prebuilt/
goreleaser-lang/
goreleaser-linux/
goreleaser-darwin/
goreleaser-windows/

__pycache__
.pytest_cache

# File targets for make
*.phony

# Temporary files
*.tmp
test-results/

# ================================
# ============   Go   ============
# ================================

.DS_Store
*.[56789ao]
*.a[56789o]
*.so
*.pyc
._*
.nfs.*
[56789a].out
*~
*.orig
*.rej
*.exe
.*.swp
core
*.cgo*.go
*.cgo*.c
_cgo_*
_obj
_test
_testmain.go
/VERSION.cache
/bin/
/build.out
/doc/articles/wiki/*.bin
/goinstall.log
/last-change
/misc/cgo/life/run.out
/misc/cgo/stdio/run.out
/misc/cgo/testso/main
/pkg/
/src/*.*/
/src/cmd/cgo/zdefaultcc.go
/src/cmd/dist/dist
/src/cmd/go/internal/cfg/zdefaultcc.go
/src/cmd/go/internal/cfg/zosarch.go
/src/cmd/internal/objabi/zbootstrap.go
/src/go/build/zcgo.go
/src/go/doc/headscan
/src/runtime/internal/sys/zversion.go
/src/unicode/maketables
/test.out
/test/garbage/*.out
/test/pass.out
/test/run.out
/test/times.out


# ================================
# ============ Python ============
# ================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
Footer
